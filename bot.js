// bot.js ‚Äì Telegram bot calculating maximum CPL for Rentino
// Requires: node-telegram-bot-api and dotenv
// Make sure package.json contains "type": "module"
// Usage: BOT_TOKEN=xxx node bot.js

import dotenv from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';

dotenv.config();

const token = process.env.BOT_TOKEN;
if (!token) {
  console.error('‚ùå  Set BOT_TOKEN in .env or env vars');
  process.exit(1);
}

// Long-polling bot
const bot = new TelegramBot(token, { polling: true });
console.log('ü§ñ Bot started with polling‚Ä¶');

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// CONSTANTS
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

// Main persistent reply keyboard (bottom menu)
const MAIN_MENU = {
  reply_markup: {
    keyboard: [
      [{ text: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–∞' }],
      [{ text: '–ù–∞—à —Ç–≥-–∫–∞–Ω–∞–ª' }],
      [{ text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º/–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' }],
      [{ text: '–†–µ–∫–ª–∞–º–∞ –≤ Telegram Ads' }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
  parse_mode: 'Markdown',
};

// Destination links
const MANAGER_LINK = 'https://t.me/tikhomirovkir';
const CHANNEL_LINK = 'https://t.me/shnurok_shipping';

const managerMarkup = {
  reply_markup: {
    inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', url: MANAGER_LINK }]],
  },
};

const channelMarkup = {
  reply_markup: {
    inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª', url: CHANNEL_LINK }]],
  },
};

// Per-chat finite-state machines for /lead wizard
const sessions = new Map();

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Utility: Calculate CPL
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

/**
 * Calculate CPL.
 * @param {Object} p
 * @param {number} p.payout  ‚Äì payout per approved lead
 * @param {number} p.approve ‚Äì approval rate, %
 * @param {number} [p.trash] ‚Äì trash rate, %
 * @param {number} [p.roi]   ‚Äì desired ROI, %
 */
function calcCPL({ payout, approve, trash = 0, roi = 0 }) {
  const A = approve / 100;
  const T = trash / 100;
  const R = roi / 100;

  const breakeven = (payout * A) / (1 + T);
  const leadPrice = breakeven / (1 + R);

  return {
    breakeven: +breakeven.toFixed(4),
    leadPrice: +leadPrice.toFixed(4),
  };
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// /start ‚Äì greeting + main menu
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

bot.onText(/\/start/, (msg) => {
  const greeting =
    '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç *Rentino* ‚Äî —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤.\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ.';

  bot.sendMessage(msg.chat.id, greeting, MAIN_MENU);
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Quick one-line mode: /calc
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

bot.onText(/\/calc (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const args = match[1].trim().split(/\s+/).map(Number);
  if (args.length < 3) {
    return bot.sendMessage(chatId, '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —á–∏—Å–ª–∞: –≤—ã–ø–ª–∞—Ç–∞, –∞–ø–ø—Ä—É–≤, —Ç—Ä—ç—à. ROI –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.');
  }
  const [payout, approve, trash, roi = 0] = args;
  if ([payout, approve, trash, roi].some((n) => Number.isNaN(n))) {
    return bot.sendMessage(chatId, '–í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.');
  }

  const { breakeven, leadPrice } = calcCPL({ payout, approve, trash, roi });
  bot.sendMessage(
    chatId,
    `CPL –ø—Ä–∏ ROI 0: *$${breakeven}*\n` + `CPL –ø—Ä–∏ ROI ${roi}%: *$${leadPrice}*`,
    { parse_mode: 'Markdown' }
  );
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Interactive wizard: /lead
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

bot.onText(/\/lead/, (msg) => {
  sessions.set(msg.chat.id, { step: 'payout', data: {} });
  bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ *–≤—ã–ø–ª–∞—Ç—É* –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –ª–∏–¥ (—á–∏—Å–ª–æ):', {
    parse_mode: 'Markdown',
  });
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Generic message handler ‚Äì handles menu buttons & wizard steps
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  if (!msg.text || msg.text.startsWith('/')) return; // ignore commands (handled above)

  // 1. Handle main-menu buttons ------------------------------------------------
  switch (msg.text) {
    case '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–∞':
      bot.sendMessage(
        chatId,
        '*–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º* ‚Äî –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:\n' +
          '`/calc <–≤—ã–ø–ª–∞—Ç–∞> <–∞–ø–ø—Ä—É–≤%> <—Ç—Ä—ç—à%> <ROI%>`\n' +
          '–ü—Ä–∏–º–µ—Ä: `/calc 20 35 30 50`\n\n' +
          '*–ü–æ—à–∞–≥–æ–≤—ã–π —Ä–µ–∂–∏–º* ‚Äî –≤–≤–µ–¥–∏—Ç–µ `/lead` –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.',
        { parse_mode: 'Markdown' }
      );
      return; // nothing more to do

    case '–ù–∞—à —Ç–≥-–∫–∞–Ω–∞–ª':
      bot.sendMessage(chatId, '–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.', channelMarkup);
      return;

    case '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º/–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
    case '–†–µ–∫–ª–∞–º–∞ –≤ Telegram Ads':
      bot.sendMessage(chatId, '–û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.', managerMarkup);
      return; // handled

    default:
      // continue below ‚Äî maybe this is a wizard answer
  }

  // 2. Handle /lead wizard steps ---------------------------------------------
  const session = sessions.get(chatId);
  if (!session) return; // not in wizard

  const val = Number(msg.text.replace(',', '.'));
  if (Number.isNaN(val)) {
    return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ.');
  }

  switch (session.step) {
    case 'payout':
      session.data.payout = val;
      session.step = 'approve';
      bot.sendMessage(chatId, '–ü—Ä–æ—Ü–µ–Ω—Ç *–∞–ø–ø—Ä—É–≤–∞* (–±–µ–∑ %):', { parse_mode: 'Markdown' });
      break;

    case 'approve':
      session.data.approve = val;
      session.step = 'trash';
      bot.sendMessage(chatId, '–ü—Ä–æ—Ü–µ–Ω—Ç *—Ç—Ä—ç—à–∞* (–±–µ–∑ %; –µ—Å–ª–∏ –Ω–µ—Ç, 0):', { parse_mode: 'Markdown' });
      break;

    case 'trash':
      session.data.trash = val;
      session.step = 'roi';
      bot.sendMessage(chatId, '–ñ–µ–ª–∞–µ–º—ã–π *ROI* (–±–µ–∑ %; 0 –¥–ª—è –Ω—É–ª—è):', { parse_mode: 'Markdown' });
      break;

    case 'roi':
      session.data.roi = val;
      const { breakeven, leadPrice } = calcCPL(session.data);
      bot.sendMessage(
        chatId,
        `‚úÖ –ì–æ—Ç–æ–≤–æ!\nCPL –ø—Ä–∏ ROI 0: *$${breakeven}*\n` +
          `CPL –ø—Ä–∏ ROI ${val}%: *$${leadPrice}*`,
        { parse_mode: 'Markdown' }
      );
      sessions.delete(chatId);
      break;

    default:
      sessions.delete(chatId);
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /lead');
  }
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// Error handler
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

bot.on('polling_error', (err) => console.error('Polling error:', err));