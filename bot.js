// bot.js ‚Äì Telegram bot calculating maximum CPL
// Requires: node-telegram-bot-api and dotenv
// Make sure package.json contains "type": "module"
// Usage: BOT_TOKEN=xxx node bot.js

import dotenv from 'dotenv';
import TelegramBot from 'node-telegram-bot-api';

dotenv.config();

const token = process.env.BOT_TOKEN;
if (!token) {
  console.error('‚ùå  Set BOT_TOKEN in .env or env vars');
  process.exit(1);
}

// Long-polling bot
const bot = new TelegramBot(token, { polling: true });
console.log('ü§ñ Bot started with polling‚Ä¶');

// üî• Promotional block sent 10 s after /start
const AD_TEXT = '–ü–æ–ª—É—á–∏ –∞–≥–µ–Ω—Ç—Å–∫–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã Meta, Bigo, Kwai, TikTok, Snapchat –∑–∞ 30 –º–∏–Ω—É—Ç. –ö–æ–º–∏—Å–∏—è –æ—Ç 6 %! –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏!';

const AD_MARKUP = {
  parse_mode: 'Markdown',
  disable_web_page_preview: false,
  reply_markup: {
    inline_keyboard: [
      [
        {
          text: '‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏',
          url: 'https://t.me/tikhomirovkir',
        },
      ],
    ],
  },
};

// Per-chat finite-state machines for /lead wizard
const sessions = new Map();

/**
 * Calculate CPL.
 * @param {Object} p
 * @param {number} p.payout  ‚Äì payout per approved lead
 * @param {number} p.approve ‚Äì approval rate, %
 * @param {number} [p.trash] ‚Äì trash rate, %
 * @param {number} [p.roi]   ‚Äì desired ROI, %
 */
function calcCPL({ payout, approve, trash = 0, roi = 0 }) {
  const A = approve / 100;
  const T = trash / 100;
  const R = roi / 100;

  const breakeven = (payout * A) / (1 + T);
  const leadPrice = breakeven / (1 + R);

  return {
    breakeven: +breakeven.toFixed(4),
    leadPrice: +leadPrice.toFixed(4),
  };
}

// /start ‚Äì greeting + help
bot.onText(/\/start/, (msg) => {
  const text =
    `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name || '–¥—Ä—É–≥'}!\n\n` +
    '–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏–¥–∞.\n\n' +
    '*–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º* ‚Äì –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:\n' +
    '`/calc <–≤—ã–ø–ª–∞—Ç–∞> <–∞–ø–ø—Ä—É–≤%> <—Ç—Ä—ç—à%> <ROI%>`\n' +
    '–ü—Ä–∏–º–µ—Ä: `/calc 20 35 30 50`\n\n' +
    '*–ü–æ—à–∞–≥–æ–≤—ã–π —Ä–µ–∂–∏–º* ‚Äì –≤–≤–µ–¥–∏—Ç–µ `/lead` –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.';

  bot
    .sendMessage(msg.chat.id, text, { parse_mode: 'Markdown' })
    .then(() => {
      // send promo after 10 000 ms
      setTimeout(() => {
        bot.sendMessage(msg.chat.id, AD_TEXT, AD_MARKUP);
      }, 10_000);
    });
});

// /calc ‚Äì one-line mode
bot.onText(/\/calc (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const args = match[1].trim().split(/\s+/).map(Number);
  if (args.length < 3) {
    return bot.sendMessage(chatId, '–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —á–∏—Å–ª–∞: –≤—ã–ø–ª–∞—Ç–∞, –∞–ø–ø—Ä—É–≤, —Ç—Ä—ç—à. ROI –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.');
  }
  const [payout, approve, trash, roi = 0] = args;
  if ([payout, approve, trash, roi].some((n) => Number.isNaN(n))) {
    return bot.sendMessage(chatId, '–í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.');
  }

  const { breakeven, leadPrice } = calcCPL({ payout, approve, trash, roi });
  bot.sendMessage(
    chatId,
    `CPL –ø—Ä–∏ ROI 0: *$${breakeven}*\n` + `CPL –ø—Ä–∏ ROI ${roi}%: *$${leadPrice}*`,
    { parse_mode: 'Markdown' }
  );
});

// /lead ‚Äì interactive wizard
bot.onText(/\/lead/, (msg) => {
  sessions.set(msg.chat.id, { step: 'payout', data: {} });
  bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ *–≤—ã–ø–ª–∞—Ç—É* –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –ª–∏–¥ (—á–∏—Å–ª–æ):', {
    parse_mode: 'Markdown',
  });
});

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  if (!msg.text || msg.text.startsWith('/')) return;

  const s = sessions.get(chatId);
  if (!s) return; // not in wizard

  const val = Number(msg.text.replace(',', '.'));
  if (Number.isNaN(val)) {
    return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ.');
  }

  switch (s.step) {
    case 'payout':
      s.data.payout = val;
      s.step = 'approve';
      bot.sendMessage(chatId, '–ü—Ä–æ—Ü–µ–Ω—Ç *–∞–ø–ø—Ä—É–≤–∞* (–±–µ–∑ %):', { parse_mode: 'Markdown' });
      break;
    case 'approve':
      s.data.approve = val;
      s.step = 'trash';
      bot.sendMessage(chatId, '–ü—Ä–æ—Ü–µ–Ω—Ç *—Ç—Ä—ç—à–∞* (–±–µ–∑ %; –µ—Å–ª–∏ –Ω–µ—Ç, 0):', { parse_mode: 'Markdown' });
      break;
    case 'trash':
      s.data.trash = val;
      s.step = 'roi';
      bot.sendMessage(chatId, '–ñ–µ–ª–∞–µ–º—ã–π *ROI* (–±–µ–∑ %; 0 –¥–ª—è –Ω—É–ª—è):', { parse_mode: 'Markdown' });
      break;
    case 'roi':
      s.data.roi = val;
      const { breakeven, leadPrice } = calcCPL(s.data);
      bot.sendMessage(
        chatId,
        `‚úÖ –ì–æ—Ç–æ–≤–æ!\nCPL –ø—Ä–∏ ROI 0: *$${breakeven}*\n` +
          `CPL –ø—Ä–∏ ROI ${val}%: *$${leadPrice}*`,
        { parse_mode: 'Markdown' }
      );
      sessions.delete(chatId);
      break;
    default:
      sessions.delete(chatId);
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /lead');
  }
});

bot.on('polling_error', (err) => console.error('Polling error:', err));